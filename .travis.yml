language: java
jdk:
  - openjdk8

branches:
  only:
    - master # 어느 브렌치에 push 될때 처리되는지


# Travis CI 서버의 home
# 캐시를 이용 같은 의존성은 받지 않도록 처리
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# 푸시시 수행될 job
script: "./gradlew clean build"

# job 실행시 실행권한 주기
before_install:
  - chmod +x gradlew

# Jar2Zip
before_deploy:
  - mkdir -p before-deploy # zip에 포함시킬 파일들을 담을 디렉토리 생성
  - cp ../*.sh before-deploy/
  - cp appspec.yml before-deploy/
  - cp build/libs/*.jar before-deploy/
  - cd before-deploy && zip -r before-deploy * # before-deploy로 이동후 전체 압축
  - cd ../ && mkdir -p deploy # 상위 디렉토리로 이동후 deploy 디렉토리 생성
  - mv before-deploy/before-deploy.zip deploy/standaloneBaseinAWS.zip # deploy로 zip파일 이동
# 배포
deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # Travis setting value
    secret_access_key: $AWS_SECRET_KEY  # Travis setting value
    bucket: redbean88-springboot-build
    region: ap-northeast-2
    skip_cleanup: true
    acl: private # zip 접근 제어자
    local_dir: deploy # 배포파일 위치
    wait-until-deployed: true
    on:
      repo: redbean88/standaloneBaseinAWS
      branch: master

  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: redbean88-springboot-build # S3 버킷
    key: standaloneBaseinAWS.zip # 빌드 파일을 압축해서 전달
    bundle_type: zip
    application: redbean88-springboot2-webservice # 웹 콘솔에서 등록한 CodeDeploy 어플리케이션
    deployment_group: redbean88-springboot2-webservice-group # 웹 콘솔에서 등록한 CodeDeploy 배포 그룹
    region: ap-northeast-2
    wait-until-deployed: true
    on:
      repo: redbean88/standaloneBaseinAWS
      branch: master

# CI 실행 완료시 메일 알림
notifications:
  email:
    recipients:
      - doctortor88@gmail.com
